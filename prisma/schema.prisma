// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url= env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Champion {
  id                    Int     @id @default(autoincrement())
  name                  String  @unique
  key                   String  @unique
  postsAsPlayingAgainst Post[]  @relation("playingAgainst")
  postsAsPlayingWith    Post[]  @relation("playingWith")
  skills                Skill[]
}

model SummonerSpell {
  id               Int    @id @default(autoincrement())
  name             String @unique
  key              String @unique
  postsAsMain      Post[] @relation("mainSummonerSpell")
  postsAsSecondary Post[] @relation("secondarySummonerSpell")
}

model Item {
  id    Int           @id @default(autoincrement())
  name  String        @unique
  image String
  posts ItemsOnPost[]
}

model Rune {
  id    Int    @id @default(autoincrement())
  name  String @unique
  key   String @unique
  img   String
  posts Post[]
}

model Post {
  id                       Int           @id @default(autoincrement())
  runeId                   Int
  rune                     Rune          @relation(fields: [runeId], references: [id])
  playingWithId            Int
  playingWith              Champion      @relation("playingWith", fields: [playingWithId], references: [id])
  playingAgainstId         Int
  playingAgainst           Champion      @relation("playingAgainst", fields: [playingAgainstId], references: [id])
  playStyle                String        @db.VarChar(500)
  mainSummonerSpellId      Int
  mainSummonerSpell        SummonerSpell @relation("mainSummonerSpell", fields: [mainSummonerSpellId], references: [id])
  secondarySummonerSpellId Int
  secondarySummonerSpell   SummonerSpell @relation("secondarySummonerSpell", fields: [secondarySummonerSpellId], references: [id])
  items                    ItemsOnPost[]
}

model ItemsOnPost {
  post    Post   @relation(fields: [postId], references: [id])
  postId  Int
  item    Item   @relation(fields: [itemId], references: [id])
  itemId  Int

  @@id([postId, itemId])
}

model Skill {
  id         Int      @id @default(autoincrement())
  key        String   @unique
  name       String
  cooldown   Int
  championId Int
  champion   Champion @relation(fields: [championId], references: [id])
}
